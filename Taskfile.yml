version: '3'

env:
  GOMAXPROCS: 1

tasks:
  runall:
    desc: Run a command in all packages
    cmds:
      - cmd: find . -mindepth 2 -name 'go.mod' -print0 | xargs -0 -n1 -P $(nproc) -- /bin/bash -c 'pushd `dirname $1`; {{.CLI_ARGS}}; popd >/dev/null' '_'
        platforms: [linux]
      - cmd: find . -mindepth 2 -name 'go.mod' -print0 | xargs -0 -n1 -P $(sysctl -n hw.physicalcpu) -- /bin/bash -c 'pushd `dirname $1`; {{.CLI_ARGS}}; popd >/dev/null' '_'
        platforms: [darwin]

  run:
    desc: Run a command in a directory
    cmds:
      - pushd {{index (splitArgs .CLI_ARGS) 0}}; {{index (splitArgs .CLI_ARGS) 1}}; popd >/dev/null
    vars:
      DIRECTORY: splitArgs

###########################
# Runall helpers
###########################
  mod-tidy:
    desc: Run "go mod tidy -go=1.23" in all packages
    cmds:
      - task: runall
        vars:
          CLI_ARGS: go mod tidy -go=1.23
  fmt:
    desc: Run "go fmt" in all packages
    cmds:
      - task: runall
        vars:
          CLI_ARGS: go fmt

  mod-update:
    desc: Run "go get -u -t ./..." in all packages
    cmds:
      - task: runall
        vars:
          CLI_ARGS: go get -u -t ./...

  mod-update-orb:
    desc: Run "go get github.com/go-orb/go-orb@main" in all packages
    cmds:
      - task: runall
        vars:
          CLI_ARGS: go get github.com/go-orb/go-orb@main

  test:
    desc: Run "go test ./..." in all packages
    cmds:
      - task: runall
        vars:
          CLI_ARGS: go test ./...

  bench:
    desc: Run "go test ./... -v -benchmem -bench=." in all packages
    cmds:
      - task: runall
        vars:
          PROCS: 1
          CLI_ARGS: go test ./... -v -bench=.

  lint-fix:
    desc: Run "golangci-lint run --fix" in all packages
    cmds:
      - task: runall
        vars:
          CLI_ARGS: golangci-lint run --fix

###########################
# Others
###########################
  check:
    desc: Run "trunk check -a" in all projects
    cmds:
      - pushd go-orb; trunk check -a || true ; popd >/dev/null
      - pushd plugins; trunk check -a || true ; popd >/dev/null

  plugins-test:
    desc: Run "./scripts/test.sh test all"
    cmds:
      - ./plugins/scripts/test.sh test all
    env:
      ORB_NODOWNLOAD: 1

  plugins-lint:
    desc: Run "./scripts/test.sh lint all"
    cmds:
      - ./plugins/scripts/test.sh lint all
    env:
      ORB_NODOWNLOAD: 1

  plugins-test.sh:
    desc: "Run test.sh with the given arguments: task test.sh -- test codecs/form"
    cmds:
      - ./plugins/scripts/test.sh {{.CLI_ARGS}}
    env:
      ORB_NODOWNLOAD: 1